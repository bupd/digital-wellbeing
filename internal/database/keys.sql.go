// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: keys.sql

package database

import (
	"context"
)

const addKey = `-- name: AddKey :one
INSERT INTO keys (keyname, keycode)
VALUES (?1, ?2)
RETURNING id, keyname, keycode, created_at
`

type AddKeyParams struct {
	Keyname string
	Keycode int64
}

func (q *Queries) AddKey(ctx context.Context, arg AddKeyParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, addKey, arg.Keyname, arg.Keycode)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.Keyname,
		&i.Keycode,
		&i.CreatedAt,
	)
	return i, err
}

const listAllKeys = `-- name: ListAllKeys :many
SELECT id, keyname, keycode, created_at FROM keys
`

func (q *Queries) ListAllKeys(ctx context.Context) ([]Key, error) {
	rows, err := q.db.QueryContext(ctx, listAllKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.Keyname,
			&i.Keycode,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeysPressedLast24Hours = `-- name: ListKeysPressedLast24Hours :many
SELECT keyname, keycode, COUNT(*) as press_count
FROM keys
WHERE created_at >= DATETIME('now', '-1 day')
GROUP BY keyname, keycode
ORDER BY press_count DESC
`

type ListKeysPressedLast24HoursRow struct {
	Keyname    string
	Keycode    int64
	PressCount int64
}

func (q *Queries) ListKeysPressedLast24Hours(ctx context.Context) ([]ListKeysPressedLast24HoursRow, error) {
	rows, err := q.db.QueryContext(ctx, listKeysPressedLast24Hours)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListKeysPressedLast24HoursRow
	for rows.Next() {
		var i ListKeysPressedLast24HoursRow
		if err := rows.Scan(&i.Keyname, &i.Keycode, &i.PressCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listKeysPressedLastHour = `-- name: ListKeysPressedLastHour :many
SELECT keyname, keycode, COUNT(*) as press_count
FROM keys
WHERE created_at >= DATETIME('now', '-1 hour')
GROUP BY keyname, keycode
ORDER BY press_count DESC
`

type ListKeysPressedLastHourRow struct {
	Keyname    string
	Keycode    int64
	PressCount int64
}

func (q *Queries) ListKeysPressedLastHour(ctx context.Context) ([]ListKeysPressedLastHourRow, error) {
	rows, err := q.db.QueryContext(ctx, listKeysPressedLastHour)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListKeysPressedLastHourRow
	for rows.Next() {
		var i ListKeysPressedLastHourRow
		if err := rows.Scan(&i.Keyname, &i.Keycode, &i.PressCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
