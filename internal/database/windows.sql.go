// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: windows.sql

package database

import (
	"context"
	"time"
)

const addWindows = `-- name: AddWindows :one
INSERT OR REPLACE INTO windows (wm_class, is_active, updated_at)
VALUES (?1, ?2, ?3)
RETURNING id, wm_class, is_active, created_at, updated_at
`

type AddWindowsParams struct {
	WmClass   string
	IsActive  int64
	UpdatedAt time.Time
}

func (q *Queries) AddWindows(ctx context.Context, arg AddWindowsParams) (Window, error) {
	row := q.db.QueryRowContext(ctx, addWindows, arg.WmClass, arg.IsActive, arg.UpdatedAt)
	var i Window
	err := row.Scan(
		&i.ID,
		&i.WmClass,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllWindows = `-- name: ListAllWindows :many
SELECT id, wm_class, is_active, created_at, updated_at FROM windows
`

func (q *Queries) ListAllWindows(ctx context.Context) ([]Window, error) {
	rows, err := q.db.QueryContext(ctx, listAllWindows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Window
	for rows.Next() {
		var i Window
		if err := rows.Scan(
			&i.ID,
			&i.WmClass,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLastDayWindows = `-- name: ListLastDayWindows :many
SELECT id, wm_class, is_active, created_at, updated_at
FROM windows
WHERE created_at >= DATETIME('now', '-1 day')
`

func (q *Queries) ListLastDayWindows(ctx context.Context) ([]Window, error) {
	rows, err := q.db.QueryContext(ctx, listLastDayWindows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Window
	for rows.Next() {
		var i Window
		if err := rows.Scan(
			&i.ID,
			&i.WmClass,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLastHourWindows = `-- name: ListLastHourWindows :many
SELECT id, wm_class, is_active, created_at, updated_at
FROM windows
WHERE updated_at >= datetime('now', '-1 hour')
`

func (q *Queries) ListLastHourWindows(ctx context.Context) ([]Window, error) {
	rows, err := q.db.QueryContext(ctx, listLastHourWindows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Window
	for rows.Next() {
		var i Window
		if err := rows.Scan(
			&i.ID,
			&i.WmClass,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const topWindowsLastDay = `-- name: TopWindowsLastDay :many
SELECT wm_class, COUNT(*) as event_count
FROM windows
WHERE updated_at >= datetime('now', '-1 day') -- Filter for the last 24 hours
GROUP BY wm_class, wm_name
ORDER BY event_count DESC
`

type TopWindowsLastDayRow struct {
	WmClass    string
	EventCount int64
}

func (q *Queries) TopWindowsLastDay(ctx context.Context) ([]TopWindowsLastDayRow, error) {
	rows, err := q.db.QueryContext(ctx, topWindowsLastDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopWindowsLastDayRow
	for rows.Next() {
		var i TopWindowsLastDayRow
		if err := rows.Scan(&i.WmClass, &i.EventCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const topWindowsLastHour = `-- name: TopWindowsLastHour :many
SELECT wm_class, COUNT(*) as event_count
FROM windows
WHERE start_time >= datetime('now', '-1 hour') -- Filter for the last 24 hours
GROUP BY wm_class
ORDER BY event_count DESC
`

type TopWindowsLastHourRow struct {
	WmClass    string
	EventCount int64
}

func (q *Queries) TopWindowsLastHour(ctx context.Context) ([]TopWindowsLastHourRow, error) {
	rows, err := q.db.QueryContext(ctx, topWindowsLastHour)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TopWindowsLastHourRow
	for rows.Next() {
		var i TopWindowsLastHourRow
		if err := rows.Scan(&i.WmClass, &i.EventCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
